/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boot.util.wiscom.存储服务.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-15")
public class FileStoreService {

  public interface Iface {

    public String storeFile(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void storeFile(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String storeFile(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path) throws org.apache.thrift.TException
    {
      send_storeFile(pass_time, content, file_suffix, head_path, bottom_path);
      return recv_storeFile();
    }

    public void send_storeFile(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path) throws org.apache.thrift.TException
    {
      storeFile_args args = new storeFile_args();
      args.setPass_time(pass_time);
      args.setContent(content);
      args.setFile_suffix(file_suffix);
      args.setHead_path(head_path);
      args.setBottom_path(bottom_path);
      sendBase("storeFile", args);
    }

    public String recv_storeFile() throws org.apache.thrift.TException
    {
      storeFile_result result = new storeFile_result();
      receiveBase(result, "storeFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void storeFile(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeFile_call method_call = new storeFile_call(pass_time, content, file_suffix, head_path, bottom_path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeFile_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String pass_time;
      private java.nio.ByteBuffer content;
      private String file_suffix;
      private String head_path;
      private String bottom_path;
      public storeFile_call(String pass_time, java.nio.ByteBuffer content, String file_suffix, String head_path, String bottom_path, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pass_time = pass_time;
        this.content = content;
        this.file_suffix = file_suffix;
        this.head_path = head_path;
        this.bottom_path = bottom_path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeFile_args args = new storeFile_args();
        args.setPass_time(pass_time);
        args.setContent(content);
        args.setFile_suffix(file_suffix);
        args.setHead_path(head_path);
        args.setBottom_path(bottom_path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("storeFile", new storeFile());
      return processMap;
    }

    public static class storeFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeFile_args> {
      public storeFile() {
        super("storeFile");
      }

      public storeFile_args getEmptyArgsInstance() {
        return new storeFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public storeFile_result getResult(I iface, storeFile_args args) throws org.apache.thrift.TException {
        storeFile_result result = new storeFile_result();
        result.success = iface.storeFile(args.pass_time, args.content, args.file_suffix, args.head_path, args.bottom_path);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("storeFile", new storeFile());
      return processMap;
    }

    public static class storeFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeFile_args, String> {
      public storeFile() {
        super("storeFile");
      }

      public storeFile_args getEmptyArgsInstance() {
        return new storeFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            storeFile_result result = new storeFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            storeFile_result result = new storeFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeFile_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.storeFile(args.pass_time, args.content, args.file_suffix, args.head_path, args.bottom_path,resultHandler);
      }
    }

  }

  public static class storeFile_args implements org.apache.thrift.TBase<storeFile_args, storeFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeFile_args");

    private static final org.apache.thrift.protocol.TField PASS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pass_time", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_SUFFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("file_suffix", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HEAD_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("head_path", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BOTTOM_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("bottom_path", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new storeFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new storeFile_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String pass_time; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content; // required
    public @org.apache.thrift.annotation.Nullable String file_suffix; // required
    public @org.apache.thrift.annotation.Nullable String head_path; // required
    public @org.apache.thrift.annotation.Nullable String bottom_path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PASS_TIME((short)1, "pass_time"),
      CONTENT((short)2, "content"),
      FILE_SUFFIX((short)3, "file_suffix"),
      HEAD_PATH((short)4, "head_path"),
      BOTTOM_PATH((short)5, "bottom_path");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASS_TIME
            return PASS_TIME;
          case 2: // CONTENT
            return CONTENT;
          case 3: // FILE_SUFFIX
            return FILE_SUFFIX;
          case 4: // HEAD_PATH
            return HEAD_PATH;
          case 5: // BOTTOM_PATH
            return BOTTOM_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASS_TIME, new org.apache.thrift.meta_data.FieldMetaData("pass_time", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FILE_SUFFIX, new org.apache.thrift.meta_data.FieldMetaData("file_suffix", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HEAD_PATH, new org.apache.thrift.meta_data.FieldMetaData("head_path", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BOTTOM_PATH, new org.apache.thrift.meta_data.FieldMetaData("bottom_path", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeFile_args.class, metaDataMap);
    }

    public storeFile_args() {
    }

    public storeFile_args(
      String pass_time,
      java.nio.ByteBuffer content,
      String file_suffix,
      String head_path,
      String bottom_path)
    {
      this();
      this.pass_time = pass_time;
      this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
      this.file_suffix = file_suffix;
      this.head_path = head_path;
      this.bottom_path = bottom_path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeFile_args(storeFile_args other) {
      if (other.isSetPass_time()) {
        this.pass_time = other.pass_time;
      }
      if (other.isSetContent()) {
        this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
      }
      if (other.isSetFile_suffix()) {
        this.file_suffix = other.file_suffix;
      }
      if (other.isSetHead_path()) {
        this.head_path = other.head_path;
      }
      if (other.isSetBottom_path()) {
        this.bottom_path = other.bottom_path;
      }
    }

    public storeFile_args deepCopy() {
      return new storeFile_args(this);
    }

    @Override
    public void clear() {
      this.pass_time = null;
      this.content = null;
      this.file_suffix = null;
      this.head_path = null;
      this.bottom_path = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPass_time() {
      return this.pass_time;
    }

    public storeFile_args setPass_time(@org.apache.thrift.annotation.Nullable String pass_time) {
      this.pass_time = pass_time;
      return this;
    }

    public void unsetPass_time() {
      this.pass_time = null;
    }

    /** Returns true if field pass_time is set (has been assigned a value) and false otherwise */
    public boolean isSetPass_time() {
      return this.pass_time != null;
    }

    public void setPass_timeIsSet(boolean value) {
      if (!value) {
        this.pass_time = null;
      }
    }

    public byte[] getContent() {
      setContent(org.apache.thrift.TBaseHelper.rightSize(content));
      return content == null ? null : content.array();
    }

    public java.nio.ByteBuffer bufferForContent() {
      return org.apache.thrift.TBaseHelper.copyBinary(content);
    }

    public storeFile_args setContent(byte[] content) {
      this.content = content == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(content.clone());
      return this;
    }

    public storeFile_args setContent(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getFile_suffix() {
      return this.file_suffix;
    }

    public storeFile_args setFile_suffix(@org.apache.thrift.annotation.Nullable String file_suffix) {
      this.file_suffix = file_suffix;
      return this;
    }

    public void unsetFile_suffix() {
      this.file_suffix = null;
    }

    /** Returns true if field file_suffix is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_suffix() {
      return this.file_suffix != null;
    }

    public void setFile_suffixIsSet(boolean value) {
      if (!value) {
        this.file_suffix = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getHead_path() {
      return this.head_path;
    }

    public storeFile_args setHead_path(@org.apache.thrift.annotation.Nullable String head_path) {
      this.head_path = head_path;
      return this;
    }

    public void unsetHead_path() {
      this.head_path = null;
    }

    /** Returns true if field head_path is set (has been assigned a value) and false otherwise */
    public boolean isSetHead_path() {
      return this.head_path != null;
    }

    public void setHead_pathIsSet(boolean value) {
      if (!value) {
        this.head_path = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBottom_path() {
      return this.bottom_path;
    }

    public storeFile_args setBottom_path(@org.apache.thrift.annotation.Nullable String bottom_path) {
      this.bottom_path = bottom_path;
      return this;
    }

    public void unsetBottom_path() {
      this.bottom_path = null;
    }

    /** Returns true if field bottom_path is set (has been assigned a value) and false otherwise */
    public boolean isSetBottom_path() {
      return this.bottom_path != null;
    }

    public void setBottom_pathIsSet(boolean value) {
      if (!value) {
        this.bottom_path = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PASS_TIME:
        if (value == null) {
          unsetPass_time();
        } else {
          setPass_time((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          if (value instanceof byte[]) {
            setContent((byte[])value);
          } else {
            setContent((java.nio.ByteBuffer)value);
          }
        }
        break;

      case FILE_SUFFIX:
        if (value == null) {
          unsetFile_suffix();
        } else {
          setFile_suffix((String)value);
        }
        break;

      case HEAD_PATH:
        if (value == null) {
          unsetHead_path();
        } else {
          setHead_path((String)value);
        }
        break;

      case BOTTOM_PATH:
        if (value == null) {
          unsetBottom_path();
        } else {
          setBottom_path((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASS_TIME:
        return getPass_time();

      case CONTENT:
        return getContent();

      case FILE_SUFFIX:
        return getFile_suffix();

      case HEAD_PATH:
        return getHead_path();

      case BOTTOM_PATH:
        return getBottom_path();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASS_TIME:
        return isSetPass_time();
      case CONTENT:
        return isSetContent();
      case FILE_SUFFIX:
        return isSetFile_suffix();
      case HEAD_PATH:
        return isSetHead_path();
      case BOTTOM_PATH:
        return isSetBottom_path();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeFile_args)
        return this.equals((storeFile_args)that);
      return false;
    }

    public boolean equals(storeFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pass_time = true && this.isSetPass_time();
      boolean that_present_pass_time = true && that.isSetPass_time();
      if (this_present_pass_time || that_present_pass_time) {
        if (!(this_present_pass_time && that_present_pass_time))
          return false;
        if (!this.pass_time.equals(that.pass_time))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_file_suffix = true && this.isSetFile_suffix();
      boolean that_present_file_suffix = true && that.isSetFile_suffix();
      if (this_present_file_suffix || that_present_file_suffix) {
        if (!(this_present_file_suffix && that_present_file_suffix))
          return false;
        if (!this.file_suffix.equals(that.file_suffix))
          return false;
      }

      boolean this_present_head_path = true && this.isSetHead_path();
      boolean that_present_head_path = true && that.isSetHead_path();
      if (this_present_head_path || that_present_head_path) {
        if (!(this_present_head_path && that_present_head_path))
          return false;
        if (!this.head_path.equals(that.head_path))
          return false;
      }

      boolean this_present_bottom_path = true && this.isSetBottom_path();
      boolean that_present_bottom_path = true && that.isSetBottom_path();
      if (this_present_bottom_path || that_present_bottom_path) {
        if (!(this_present_bottom_path && that_present_bottom_path))
          return false;
        if (!this.bottom_path.equals(that.bottom_path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPass_time()) ? 131071 : 524287);
      if (isSetPass_time())
        hashCode = hashCode * 8191 + pass_time.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetFile_suffix()) ? 131071 : 524287);
      if (isSetFile_suffix())
        hashCode = hashCode * 8191 + file_suffix.hashCode();

      hashCode = hashCode * 8191 + ((isSetHead_path()) ? 131071 : 524287);
      if (isSetHead_path())
        hashCode = hashCode * 8191 + head_path.hashCode();

      hashCode = hashCode * 8191 + ((isSetBottom_path()) ? 131071 : 524287);
      if (isSetBottom_path())
        hashCode = hashCode * 8191 + bottom_path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(storeFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPass_time()).compareTo(other.isSetPass_time());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPass_time()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pass_time, other.pass_time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_suffix()).compareTo(other.isSetFile_suffix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_suffix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_suffix, other.file_suffix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHead_path()).compareTo(other.isSetHead_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHead_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head_path, other.head_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBottom_path()).compareTo(other.isSetBottom_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBottom_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bottom_path, other.bottom_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeFile_args(");
      boolean first = true;

      sb.append("pass_time:");
      if (this.pass_time == null) {
        sb.append("null");
      } else {
        sb.append(this.pass_time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_suffix:");
      if (this.file_suffix == null) {
        sb.append("null");
      } else {
        sb.append(this.file_suffix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("head_path:");
      if (this.head_path == null) {
        sb.append("null");
      } else {
        sb.append(this.head_path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bottom_path:");
      if (this.bottom_path == null) {
        sb.append("null");
      } else {
        sb.append(this.bottom_path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeFile_argsStandardScheme getScheme() {
        return new storeFile_argsStandardScheme();
      }
    }

    private static class storeFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<storeFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PASS_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pass_time = iprot.readString();
                struct.setPass_timeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readBinary();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_SUFFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file_suffix = iprot.readString();
                struct.setFile_suffixIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HEAD_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.head_path = iprot.readString();
                struct.setHead_pathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BOTTOM_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bottom_path = iprot.readString();
                struct.setBottom_pathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pass_time != null) {
          oprot.writeFieldBegin(PASS_TIME_FIELD_DESC);
          oprot.writeString(struct.pass_time);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.file_suffix != null) {
          oprot.writeFieldBegin(FILE_SUFFIX_FIELD_DESC);
          oprot.writeString(struct.file_suffix);
          oprot.writeFieldEnd();
        }
        if (struct.head_path != null) {
          oprot.writeFieldBegin(HEAD_PATH_FIELD_DESC);
          oprot.writeString(struct.head_path);
          oprot.writeFieldEnd();
        }
        if (struct.bottom_path != null) {
          oprot.writeFieldBegin(BOTTOM_PATH_FIELD_DESC);
          oprot.writeString(struct.bottom_path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeFile_argsTupleScheme getScheme() {
        return new storeFile_argsTupleScheme();
      }
    }

    private static class storeFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<storeFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPass_time()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetFile_suffix()) {
          optionals.set(2);
        }
        if (struct.isSetHead_path()) {
          optionals.set(3);
        }
        if (struct.isSetBottom_path()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPass_time()) {
          oprot.writeString(struct.pass_time);
        }
        if (struct.isSetContent()) {
          oprot.writeBinary(struct.content);
        }
        if (struct.isSetFile_suffix()) {
          oprot.writeString(struct.file_suffix);
        }
        if (struct.isSetHead_path()) {
          oprot.writeString(struct.head_path);
        }
        if (struct.isSetBottom_path()) {
          oprot.writeString(struct.bottom_path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.pass_time = iprot.readString();
          struct.setPass_timeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readBinary();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file_suffix = iprot.readString();
          struct.setFile_suffixIsSet(true);
        }
        if (incoming.get(3)) {
          struct.head_path = iprot.readString();
          struct.setHead_pathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bottom_path = iprot.readString();
          struct.setBottom_pathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class storeFile_result implements org.apache.thrift.TBase<storeFile_result, storeFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new storeFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new storeFile_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeFile_result.class, metaDataMap);
    }

    public storeFile_result() {
    }

    public storeFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeFile_result(storeFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public storeFile_result deepCopy() {
      return new storeFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSuccess() {
      return this.success;
    }

    public storeFile_result setSuccess(@org.apache.thrift.annotation.Nullable String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeFile_result)
        return this.equals((storeFile_result)that);
      return false;
    }

    public boolean equals(storeFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(storeFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeFile_resultStandardScheme getScheme() {
        return new storeFile_resultStandardScheme();
      }
    }

    private static class storeFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<storeFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeFile_resultTupleScheme getScheme() {
        return new storeFile_resultTupleScheme();
      }
    }

    private static class storeFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<storeFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
